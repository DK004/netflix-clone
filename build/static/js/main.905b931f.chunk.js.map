{"version":3,"sources":["Nav.js","axios.js","Requests.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignUpScreen.js","screens/LoginScreen.js","features/counter/counterAPI.js","features/userSlice.js","screens/PlanScreen.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","history","useHistory","useState","show","handleShow","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","api_key","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundImage","backdrop_path","backgroundSize","backgroundPosition","title","name","original_name","backgroundColor","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignUpScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","console","log","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","userSlice","createSlice","initialState","user","status","reducers","login","state","action","payload","logout","extraReducers","builder","addCase","pending","fulfilled","actions","selectUser","PlanScreen","useSelector","Plan","props","quality","rValue","stripeKey","token","email","borderRadius","ProfileScreen","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","exact","path","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.905b931f.chunk.js","sourcesContent":["import React , {useEffect, useState} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const history = useHistory();\r\n    const [show, handleShow] = useState(false);\r\n    const transitionNavBar=()=>{\r\n        if(window.scrollY>100){\r\n            handleShow(true);\r\n        }else{\r\n            handleShow(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", transitionNavBar)\r\n        return () => {\r\n            window.removeEventListener(\"scroll\",transitionNavBar);\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <div className=\"nav_contents\">\r\n                <img \r\n                onClick={()=>{\r\n                    history.push(\"/\");\r\n                }}\r\n                className=\"nav_logo\" src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"logo\" />\r\n                <img \r\n                onClick={()=>{\r\n                    history.push(\"/profile\");\r\n                }}\r\n                className=\"nav_avatar\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\r\n                    alt=\"avatar\" />\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import axios from 'axios';\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n})\r\n\r\nexport default instance;","const api_key = \"04bf942b5745f94f3b8248ab79d224e2\";\r\n\r\nconst requests={\r\n    fetchTrending :  `/trending/all/week?api_key=${api_key}&language=en-US`,\r\n    fetchNetflixOriginals : `/discover/tv?api_key=${api_key}&with_networks=213`,\r\n    fetchTopRated : `/movie/top_rated?api_key=${api_key}&language=en-US`,\r\n    fetchActionMovies :`/discover/movie?api_key=${api_key}&with_genres=28`,\r\n    fetchComedyMovies : `/discover/movie?api_key=${api_key}&with_genres=35`,\r\n    fetchHorrorMovies : `/discover/movie?api_key=${api_key}&with_genres=27`,\r\n    fetchRomanceMovies : `/discover/movie?api_key=${api_key}&with_genres=10749`,\r\n    fetchDocumentries : `/discover/movie?api_key=${api_key}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import axios from './axios';\r\nimport React, {useEffect, useState} from 'react';\r\nimport \"./Banner.css\";\r\nimport requests from \"./Requests\";\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport ListIcon from '@material-ui/icons/List';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie]=useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n//  console.log(movie);\r\n\r\n    function truncate(string, n){\r\n        return string?.length>n?string.substr(0, n-1)+'...' : string;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\" style={{backgroundImage:`url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`, backgroundSize:\"cover\", backgroundPosition:\"center center\"}}>\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\" style={{backgroundColor:\"#E50914\"}}><PlayArrowIcon/> Play</button>\r\n                    <button className=\"banner_button\"><ListIcon /> My List</button>\r\n                </div>\r\n                <h1 className=\"banner_description\">\r\n                    {truncate(movie?.overview,150)}\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner_fadeBottom\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React,{useState, useEffect} from 'react';\r\nimport \"./Row.css\"\r\nimport axios from \"./axios\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n    const [movies, setMovies] = useState([]);\r\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n           const request = await axios.get(fetchUrl);\r\n            setMovies(\r\n                request.data.results\r\n            );\r\n                return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl])\r\n    \r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n<div className=\"row_posters\">\r\n\r\n            {movies.map(movie =>(\r\n                <img \r\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                key={movie.id}\r\n                src={`${base_url}${\r\n                    isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`} alt={movie.name}/>\r\n            ))}\r\n\r\n</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\r\nimport \"./HomeScreen.css\";\r\nimport Nav from \"../Nav\";\r\nimport Banner from \"../Banner\";\r\nimport requests from \"../Requests\";\r\nimport Row from \"../Row\";\r\n\r\nfunction HomeScreen() {\r\n    return (\r\n        <div className=\"homeScreen\">\r\n            {/* navbar */}\r\n            <Nav /> \r\n\r\n            {/* banner */}\r\n            <Banner/>\r\n\r\n            {/* Row */}\r\n            <Row\r\n            title=\"NETFLIX ORIGINALS\"\r\n            fetchUrl = {requests.fetchNetflixOriginals}\r\n            isLargeRow\r\n            />\r\n\r\n<Row\r\n            title=\"Trending Now\"\r\n            fetchUrl = {requests.fetchTopRated}\r\n            />\r\n\r\n<Row\r\n            title=\"Action Movies\"\r\n            fetchUrl = {requests.fetchActionMovies}\r\n            />\r\n\r\n<Row\r\n            title=\"Comedy Movies\"\r\n            fetchUrl = {requests.fetchComedyMovies}\r\n            />\r\n\r\n<Row\r\n            title=\"Horror Movies\"\r\n            fetchUrl = {requests.fetchHorrorMovies}\r\n            isLargeRow\r\n            />\r\n\r\n            \r\n<Row\r\n            title=\"Romace Movies\"\r\n            fetchUrl = {requests.fetchRomanceMovies}\r\n            isLargeRow\r\n            />\r\n\r\n            \r\n{/* <Row\r\n            title=\"Documentries\"\r\n            fetchUrl = {requests.fetchDocumentries}\r\n            isLargeRow\r\n            /> */}\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen;\r\n","// firebase deployment commnads\r\n// firebase login\r\n// firebase init\r\n// firebase deploy\r\n\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDBO0faQCX9JvTOIcsF5velCe31gnbG-4A\",\r\n  authDomain: \"netflix-clone-170cd.firebaseapp.com\",\r\n  projectId: \"netflix-clone-170cd\",\r\n  storageBucket: \"netflix-clone-170cd.appspot.com\",\r\n  messagingSenderId: \"255216901092\",\r\n  appId: \"1:255216901092:web:5dcecab9c14eab6b1045f1\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport {auth};\r\nexport default db;","import React,{useRef} from 'react'\r\nimport \"./SignUpScreen.css\";\r\nimport {auth} from \"../firebase\";\r\n\r\nfunction SignUpScreen() {\r\n\r\n    const emailRef = useRef(null);\r\n    const passwordRef = useRef(null);\r\n\r\n    const register =(e) =>{\r\n        e.preventDefault();\r\n        auth.createUserWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser)=>{\r\n            console.log(authUser)\r\n        }).catch((error)=>{\r\n            alert(error.message);\r\n        });\r\n    }\r\n\r\n    const signIn = (e) =>{\r\n        e.preventDefault();\r\n        auth.signInWithEmailAndPassword(\r\n            emailRef.current.value,\r\n            passwordRef.current.value\r\n        ).then((authUser)=>{\r\n            console.log(authUser)\r\n        }).catch((error)=>{\r\n            alert(error.message);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"signUpScreen\">\r\n            <form>\r\n                <h1>Sign In</h1>\r\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\"/>\r\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\"/>\r\n                <button type=\"submit\" onClick={signIn}>Log In</button>\r\n                <h4><span className=\"grey\">New to Netflix ?</span> </h4>\r\n                <button onClick={register}>Sign Up</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUpScreen","import React , { useState } from 'react'\r\nimport \"./LoginScreen.css\"\r\nimport SignUpScreen from \"./SignUpScreen\";\r\n\r\nfunction LoginScreen() {\r\n\r\nconst [signIn, setSignIn] = useState(false);\r\n\r\n    return (\r\n        <div className=\"loginScreen\">\r\n        <div className=\"loginScreen_background\">\r\n            <img className=\"loginScreen_logo\" src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"logo\"/>\r\n            <button className=\"loginScreen_button\" onClick={()=> setSignIn(true)}>Sign in</button>\r\n\r\n            <div className=\"loginScreen_gradient\"/>\r\n        </div>\r\n            \r\n           <div className=\"loginScreen_body\">\r\n           {\r\n               signIn?(\r\n                   <SignUpScreen />\r\n               ):(\r\n           <>\r\n               <h1>Unlimited films, TV programmes and more.</h1>\r\n               <h2>Watch anywhere. Cancle at anytime.</h2>\r\n               <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\r\n               <div className=\"loginScreen_input\">\r\n                   <form>\r\n                       <input type=\"email\" placeholder=\"Email Address\" />\r\n                       <button className=\"loginScreen_getStarted\" onClick={()=>setSignIn(true)}>\r\n                           Get Started\r\n                       </button>\r\n                   </form>\r\n               </div>\r\n           </>\r\n\r\n               )\r\n           }\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default LoginScreen\r\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\n\nconst initialState = {\n  user: null,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    login:(state, action)=>{\n      state.user = action.payload;\n    },\n    logout:(state)=>{\n      state.user = null\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n    .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React from 'react'\r\nimport \"./PlanScreen.css\"\r\nimport StripeCheckout from \"react-stripe-checkout\";\r\nimport { selectUser } from '../features/userSlice';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nfunction PlanScreen() {\r\n    const user = useSelector(selectUser);\r\n \r\n\r\n\r\n    const Plan = (props)=>{\r\n        return(\r\n        <div className=\"planScreen_plans\">\r\n                <div className=\"planScreen_info\">\r\n                    <h5>{props.name}</h5>\r\n                    <h6>{props.quality} </h6>\r\n                </div>\r\n                <input type=\"radio\" name=\"plan\" value={props.rValue}  />\r\n        </div>\r\n        )\r\n\r\n    }\r\n\r\n\r\n    function handleToken(token){\r\n        console.log(token);\r\n\r\n    }\r\n    return (\r\n        <div className =\"planScreen\">\r\n        <form>\r\n        <Plan \r\n            name = \"Basic\"\r\n            quality = \"480p\"\r\n            rValue = \"6.99\"\r\n        />\r\n            \r\n            <Plan \r\n            name = \"Standard\"\r\n            quality = \"1080p\"\r\n            rValue = \"7.99\"\r\n        />\r\n\r\n<Plan \r\n            name = \"Premium\"\r\n            quality = \"4K + HDR\"\r\n            rValue = \"8.99\"\r\n        />\r\n            \r\n         \r\n            </form>\r\n\r\n                <StripeCheckout\r\n                stripeKey=\"pk_test_51JD99pSCEAc3gEiNQwvB29VjBhsrlXGbGT4Petd4OJu9FZRpdUcJVtGa0LCuT0S0x3Q1xDiFJWaZm5YAdeGB0t0I00bxayi8M6\"\r\n                token={handleToken}\r\n                name=\"Standard\"\r\n                email={user.email}\r\n                style={{\r\n                    borderRadius:\"none\"\r\n                }}\r\n                \r\n                 />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlanScreen\r\n","import React from 'react'\r\nimport Nav from \"../Nav\";\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { auth } from '../firebase';\r\nimport \"./ProfileScreen.css\";\r\nimport PlanScreen from './PlanScreen';\r\n\r\nfunction ProfileScreen() {\r\n    const user = useSelector(selectUser);\r\n    return (\r\n        <div className=\"profileScreen\">\r\n           <Nav/>\r\n           <div className=\"profileScreen_body\">\r\n               <h1>Edit Profile</h1>\r\n               <div className=\"profileScreen_info\">\r\n                   <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"avatar\"/>\r\n              \r\n               <div className=\"profileScreen_details\">\r\n                    <h2>{user.email}</h2>\r\n                    <div className=\"profileScreen_plans\">\r\n                        <h3>Plans</h3>\r\n                        <PlanScreen/>\r\n                        <button className=\"profileScreen_signOut\" onClick={()=>{\r\n                            auth.signOut()\r\n                        }}>Sign Out</button>\r\n                    </div>\r\n               </div>\r\n                </div>             \r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport HomeScreen from \"./screens/HomeScreen\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport LoginScreen from './screens/LoginScreen';\nimport {auth} from \"./firebase\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {logout, selectUser,login} from \"./features/userSlice\";\nimport ProfileScreen from \"./screens/ProfileScreen\";\n\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n  \n\n\n\n  const  dispatch = useDispatch();\n  \n  useEffect(() => {\n    \n    const unsubscribe =  auth.onAuthStateChanged(userAuth => {\n      if(userAuth){\n        // Logged in\n        // console.log(userAuth);\n        dispatch(login({\n          uid : userAuth.uid,\n          email :userAuth.email\n        }))\n      }else{\n        // logged out\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n    // eslint-disable-next-line \n  }, [dispatch])\n\n  return (\n    <div className=\"app\">\n\n      <Router>\n  {\n    !user?(\n      <LoginScreen/>\n    ):(\n        <Switch>\n          <Route exact path=\"/\">\n            <HomeScreen />\n          </Route>\n        <Route exact path=\"/profile\">\n          <ProfileScreen />\n        </Route>\n        </Switch>\n    )\n  }\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}